import numpy as np
import matplotlib.pyplot as plt

# Constants
g = 9.81  # Gravity in m/s^2

# Input Parameters
m1 = float(input("Enter mass of Link 1 (kg): "))
m2 = float(input("Enter mass of Link 2 (kg): "))
m_load = float(input("Enter mass of Load (kg): "))
L1 = float(input("Enter length of Link 1 (m): "))
L2 = float(input("Enter length of Link 2 (m): "))

# Range for theta values for plotting (in degrees)
theta1_range = np.linspace(0, 180, 180)
theta2_range = np.linspace(0, 180, 180)

# Initialize lists to store results for plotting
tau1_values = []
tau2_values = []
Fg1_values = []
Fg2_values = []
F_ext_values = []

# Function to calculate forces and torques
def calculate_forces_and_torques(theta1, theta2):
    # Convert angles to radians
    theta1_rad = np.radians(theta1)
    theta2_rad = np.radians(theta2)

    # Gravitational forces for each link and load
    Fg1 = m1 * g
    Fg2 = m2 * g
    F_ext = m_load * g

    # Torque at Joint 2
    tau2 = Fg2 * (L2 / 2) * np.sin(theta2_rad) + F_ext * L2 * np.sin(theta2_rad)

    # Torque at Joint 1
    tau1 = (
        Fg1 * (L1 / 2) * np.sin(theta1_rad)
        + Fg2 * L1 * np.sin(theta1_rad)
        + Fg2 * (L2 / 2) * np.sin(theta1_rad + theta2_rad)
        + F_ext * (L1 + L2) * np.sin(theta1_rad + theta2_rad)
    )

    return Fg1, Fg2, F_ext, tau1, tau2

# Calculate forces and torques for a range of angles
for theta1 in theta1_range:
    for theta2 in theta2_range:
        Fg1, Fg2, F_ext, tau1, tau2 = calculate_forces_and_torques(theta1, theta2)
        Fg1_values.append(Fg1)
        Fg2_values.append(Fg2)
        F_ext_values.append(F_ext)
        tau1_values.append(tau1)
        tau2_values.append(tau2)

# Convert lists to arrays for plotting
tau1_values = np.array(tau1_values)
tau2_values = np.array(tau2_values)
Fg1_values = np.array(Fg1_values)
Fg2_values = np.array(Fg2_values)
F_ext_values = np.array(F_ext_values)

# Plotting Force and Torque vs Joint Angles
plt.figure(figsize=(12, 10))

# Plot Tau1 vs Theta1
plt.subplot(2, 2, 1)
plt.plot(theta1_range, tau1_values[:len(theta1_range)], label=r'$\tau_1$ (Torque at Joint 1)')
plt.xlabel(r'$\theta_1$ (degrees)')
plt.ylabel('Torque (Nm)')
plt.title('Torque at Joint 1 vs. Joint Angle')
plt.legend()

# Plot Tau2 vs Theta2
plt.subplot(2, 2, 2)
plt.plot(theta2_range, tau2_values[:len(theta2_range)], label=r'$\tau_2$ (Torque at Joint 2)')
plt.xlabel(r'$\theta_2$ (degrees)')
plt.ylabel('Torque (Nm)')
plt.title('Torque at Joint 2 vs. Joint Angle')
plt.legend()

# Plot Force vs Theta1 for Link 1
plt.subplot(2, 2, 3)
plt.plot(theta1_range, Fg1_values[:len(theta1_range)], label=r'$F_{g1}$ (Force on Link 1)')
plt.xlabel(r'$\theta_1$ (degrees)')
plt.ylabel('Force (N)')
plt.title('Gravitational Force on Link 1 vs. Joint Angle')
plt.legend()

# Plot Force vs Theta2 for Link 2 and Load
plt.subplot(2, 2, 4)
plt.plot(theta2_range, Fg2_values[:len(theta2_range)], label=r'$F_{g2}$ (Force on Link 2)')
plt.plot(theta2_range, F_ext_values[:len(theta2_range)], label=r'$F_{\text{ext}}$ (Force on Load)')
plt.xlabel(r'$\theta_2$ (degrees)')
plt.ylabel('Force (N)')
plt.title('Gravitational Forces on Link 2 and Load vs. Joint Angle')
plt.legend()

plt.tight_layout()
plt.show()
